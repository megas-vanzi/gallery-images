{"version":3,"sources":["components/Card.jsx","components/FormImg.jsx","components/Loading.jsx","components/Cards.jsx","hooks/useFetchImages.js","components/Container.jsx","components/Footer.jsx","components/Header.jsx","App.jsx","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Card","img","className","style","width","src","alt","FormImg","handleSubmit","onSubmit","type","name","Loading","role","Cards","useState","images","setImages","input","setInput","loading","setLoading","peticion","useCallback","a","route","key","encodeURI","fetch","res","json","data","results","useEffect","e","preventDefault","text","target","value","useFetchImages","map","urls","regular","id","Container","Footer","Date","getFullYear","Header","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.104e49a7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Card = ({ img }) => {\r\n  return (\r\n    <div>\r\n      <div\r\n        className=\"card m-2\"\r\n        style={{\r\n          width: \"18rem\",\r\n        }}\r\n      >\r\n        <img src={img} className=\"card-img-top\" alt=\"imagen.png\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nCard.propTypes = {\r\n  img: PropTypes.string,\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst FormImg = ({ handleSubmit }) => {\r\n  return (\r\n    <>\r\n      <form onSubmit={handleSubmit}>\r\n        <label className=\"w-75\">\r\n          {\" \"}\r\n          Buscar: <input className=\"w-100\" type=\"text\" name=\"inputText\" />{\" \"}\r\n        </label>\r\n        <button type=\"submit\" className=\"btn btn-warning m-2\">\r\n          <span className=\"material-icons\">search</span>\r\n        </button>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nFormImg.propTypes = {\r\n  handleSubmit: PropTypes.func,\r\n};\r\n\r\nexport default FormImg;\r\n","import React from \"react\";\r\n\r\nconst Loading = () => {\r\n  return (\r\n    <div className=\"spinner-border text-info\" role=\"status\">\r\n      <span className=\"visually-hidden\">Loading...</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loading;\r\n","import { useFetchImages } from \"../hooks/useFetchImages\";\r\nimport Card from \"./Card\";\r\nimport FormImg from \"./FormImg\";\r\nimport Loading from \"./Loading\";\r\n\r\nconst Cards = () => {\r\n  const [images, loading, handleSubmit] = useFetchImages();\r\n\r\n  return (\r\n    <div className=\"text-center\">\r\n      <FormImg handleSubmit={handleSubmit} />\r\n      <hr />\r\n\r\n      {loading && <Loading />}\r\n\r\n      <div className=\"row\">\r\n        {images.map((img) => {\r\n          return (\r\n            <div key={img.id} className=\"col\">\r\n              <Card img={img.urls.regular} />\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cards;\r\n","import { useCallback, useEffect, useState } from \"react\";\r\n\r\nexport const useFetchImages = () => {\r\n  const [images, setImages] = useState([]);\r\n  const [input, setInput] = useState(\"\");\r\n\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const peticion = useCallback(async () => {\r\n    const key = \"client_id=v80RNvdVHg5OYbvYqqa5p7af8kYxV_piQMidKHu0mD4\";\r\n\r\n    let route = `https://api.unsplash.com/photos/?${key}`;\r\n\r\n    if (input !== \"\") {\r\n      route = `https://api.unsplash.com/search/photos/?query=${encodeURI(\r\n        input\r\n      )}&${key}`;\r\n    }\r\n\r\n    setLoading(true);\r\n\r\n    const res = await fetch(route);\r\n\r\n    const data = await res.json();\r\n\r\n    if (data.results) {\r\n      setImages(data.results);\r\n    } else {\r\n      setImages(data);\r\n    }\r\n\r\n    setLoading(false);\r\n  }, [input]);\r\n\r\n  useEffect(() => {\r\n    peticion();\r\n  }, [peticion]);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const text = e.target[0].value;\r\n\r\n    setInput(text);\r\n  };\r\n\r\n  return [images, loading, handleSubmit];\r\n};\r\n","import React from \"react\";\r\nimport Cards from \"./Cards\";\r\n\r\nconst Container = () => {\r\n  return (\r\n    <div className=\"container border my-3\">\r\n      <Cards />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Container;\r\n","import React from \"react\";\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <nav className=\"navbar navbar-dark text-center bg-primary\">\r\n      <div className=\"container-fluid \">\r\n        <p className=\"navbar-brand h1\">\r\n          {\" \"}\r\n          MÃ©gas Vanzi - &copy; {new Date().getFullYear()}{\" \"}\r\n        </p>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <nav className=\"navbar navbar-dark bg-primary\">\r\n      <div className=\"container-fluid\">\r\n        <span className=\"navbar-brand mb-0 h1\">Gallery App</span>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\nimport Container from \"./components/Container\";\nimport Footer from \"./components/Footer\";\nimport Header from \"./components/Header\";\n\nconst App = () => {\n  return (\n    <div>\n      <Header />\n      <Container />\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App.jsx\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}